pg_stat_user_tables:
  query: "SELECT schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd, n_live_tup, n_dead_tup, n_mod_since_analyze, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze, vacuum_count, autovacuum_count, analyze_count, autoanalyze_count FROM pg_stat_user_tables"
  metrics:
    - schemaname:
        usage: "LABEL"
        description: "Name of the schema that this table is in"
    - relname:
        usage: "LABEL"
        description: "Name of this table"
    - seq_scan:
        usage: "COUNTER"
        description: "Number of sequential scans initiated on this table"
    - seq_tup_read:
        usage: "COUNTER"
        description: "Number of live rows fetched by sequential scans"
    - idx_scan:
        usage: "COUNTER"
        description: "Number of index scans initiated on this table"
    - idx_tup_fetch:
        usage: "COUNTER"
        description: "Number of live rows fetched by index scans"
    - n_tup_ins:
        usage: "COUNTER"
        description: "Number of rows inserted"
    - n_tup_upd:
        usage: "COUNTER"
        description: "Number of rows updated"
    - n_tup_del:
        usage: "COUNTER"
        description: "Number of rows deleted"
    - n_tup_hot_upd:
        usage: "COUNTER"
        description: "Number of rows HOT updated (i.e., with no separate index update required)"
    - n_live_tup:
        usage: "GAUGE"
        description: "Estimated number of live rows"
    - n_dead_tup:
        usage: "GAUGE"
        description: "Estimated number of dead rows"
    - n_mod_since_analyze:
        usage: "GAUGE"
        description: "Estimated number of rows changed since last analyze"
    - last_vacuum:
        usage: "GAUGE"
        description: "Last time at which this table was manually vacuumed (not counting VACUUM FULL)"
    - last_autovacuum:
        usage: "GAUGE"
        description: "Last time at which this table was vacuumed by the autovacuum daemon"
    - last_analyze:
        usage: "GAUGE"
        description: "Last time at which this table was manually analyzed"
    - last_autoanalyze:
        usage: "GAUGE"
        description: "Last time at which this table was analyzed by the autovacuum daemon"
    - vacuum_count:
        usage: "COUNTER"
        description: "Number of times this table has been manually vacuumed (not counting VACUUM FULL)"
    - autovacuum_count:
        usage: "COUNTER"
        description: "Number of times this table has been vacuumed by the autovacuum daemon"
    - analyze_count:
        usage: "COUNTER"
        description: "Number of times this table has been manually analyzed"
    - autoanalyze_count:
        usage: "COUNTER"
        description: "Number of times this table has been analyzed by the autovacuum daemon"

pg_database:
  query: " SELECT pg_database.datname, pg_database_size(pg_database.datname) as size FROM pg_database"
  metrics:
    - datname:
        usage: "LABEL"
        description: "Name of the database"
    - size:
        usage: "GAUGE"
        description: "Disk space used by the database"

pg_table_bloat:
  # Thanks to ioguix and his work at https://github.com/ioguix/pgsql-bloat-estimation
  query: >
    SELECT current_database() AS db, schemaname, tblname, bs*tblpages AS real_size,

      (tblpages-est_tblpages)*bs AS extra_size,

      CASE WHEN tblpages - est_tblpages > 0

        THEN 100 * (tblpages - est_tblpages)/tblpages::float

        ELSE 0

      END AS extra_ratio, fillfactor, (tblpages-est_tblpages_ff)*bs AS bloat_size,

      CASE WHEN tblpages - est_tblpages_ff > 0

        THEN 100 * (tblpages - est_tblpages_ff)/tblpages::float

        ELSE 0

      END AS bloat_ratio, is_na

      -- , (pst).free_percent + (pst).dead_tuple_percent AS real_frag

    FROM (

      SELECT ceil( reltuples / ( (bs-page_hdr)/tpl_size ) ) + ceil( toasttuples / 4 ) AS est_tblpages,

        ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff,

        tblpages, fillfactor, bs, tblid, schemaname, tblname, heappages, toastpages, is_na

        -- , stattuple.pgstattuple(tblid) AS pst

      FROM (

        SELECT

          ( 4 + tpl_hdr_size + tpl_data_size + (2*ma)

            - CASE WHEN tpl_hdr_size%ma = 0 THEN ma ELSE tpl_hdr_size%ma END

            - CASE WHEN ceil(tpl_data_size)::int%ma = 0 THEN ma ELSE ceil(tpl_data_size)::int%ma END

          ) AS tpl_size, bs - page_hdr AS size_per_block, (heappages + toastpages) AS tblpages, heappages,

          toastpages, reltuples, toasttuples, bs, page_hdr, tblid, schemaname, tblname, fillfactor, is_na

        FROM (

          SELECT

            tbl.oid AS tblid, ns.nspname AS schemaname, tbl.relname AS tblname, tbl.reltuples,

            tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages,

            coalesce(toast.reltuples, 0) AS toasttuples,

            coalesce(substring(

              array_to_string(tbl.reloptions, ' ')

              FROM '%fillfactor=#"__#"%' FOR '#')::smallint, 100) AS fillfactor,

            current_setting('block_size')::numeric AS bs,

            CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma,

            24 AS page_hdr,

            CASE WHEN current_setting('server_version_num')::integer < 80300 THEN 27 ELSE 23 END

              + CASE WHEN MAX(coalesce(null_frac,0)) > 0 THEN ( 7 + count(*) ) / 8 ELSE 0::int END

              + CASE WHEN tbl.relhasoids THEN 4 ELSE 0 END AS tpl_hdr_size,

            sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 1024) ) AS tpl_data_size,

            bool_or(att.atttypid = 'pg_catalog.name'::regtype)

              OR count(att.attname) <> count(s.attname) AS is_na

          FROM pg_attribute AS att

            JOIN pg_class AS tbl ON att.attrelid = tbl.oid

            JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace

            LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname

              AND s.tablename = tbl.relname AND s.attname=att.attname

            LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid

          WHERE att.attnum > 0 AND NOT att.attisdropped

            AND tbl.relkind = 'r'

          GROUP BY 1,2,3,4,5,6,7,8,9,10, tbl.relhasoids

          ORDER BY 2,3

        ) AS s

      ) AS s2

    ) AS s3
    -- condition added for purposes of the demo monitoring
    WHERE WHERE schemaname != 'pg_catalog' AND is_na is false;
    ;
  metrics:
    - db:
        usage: "LABEL"
        description: "Name of the database"
    - schemaname:
        usage: "LABEL"
        description: "Name of the schema that this table is in"
    - tblname:
        usage: "LABEL"
        description: "Name of this table"
    - real_size:
        usage: "COUNTER"
        description: "Real size of the table"
    - extra_size:
        usage: "COUNTER"
        description: "Estimated extra size not used/needed in the table. This extra size is composed by the fillfactor, bloat and alignment padding spaces"
    - extra_ratio:
        usage: "COUNTER"
        description: "Estimated ratio of the real size used by extra_size"
    - bloat_size:
        usage: "COUNTER"
        description: "Estimated size of the bloat without the extra space kept for the fillfactor"
    - bloat_ratio:
        usage: "COUNTER"
        description: "Estimated ratio of the real size used by bloat_size"
    - fillfactor:
        usage: "COUNTER"
        description: "The fillfactor of the table"
    - is_na:
        usage: "LABEL"
        description: "Is the estimation 'Not Applicable'? If true, do not trust the stats"
